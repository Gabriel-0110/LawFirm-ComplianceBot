using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.Graph;
using TeamsComplianceBot.Services;
using System.Text.Json;
using System.Net.Http;
using System.Security.Authentication;

namespace TeamsComplianceBot.Controllers
{
    /// <summary>
    /// Controller for managing Microsoft Graph subscriptions for Teams call notifications
    /// </summary>
    [ApiController]
    [Route("api/[controller]")]    public class SubscriptionsController : ControllerBase
    {
        private readonly IGraphSubscriptionService _subscriptionService;
        private readonly GraphServiceClient _graphClient;
        private readonly ILogger<SubscriptionsController> _logger;
        private readonly IConfiguration _configuration;

        public SubscriptionsController(
            IGraphSubscriptionService subscriptionService,
            GraphServiceClient graphClient,
            ILogger<SubscriptionsController> logger,
            IConfiguration configuration)
        {
            _subscriptionService = subscriptionService;
            _graphClient = graphClient;
            _logger = logger;
            _configuration = configuration;
        }

        /// <summary>
        /// Creates subscriptions for Teams call notifications
        /// </summary>
        [HttpPost("create-teams-calls")]
        public async Task<IActionResult> CreateTeamsCallSubscriptions()
        {
            try
            {
                _logger.LogInformation("Creating Teams call subscriptions...");

                var results = new List<object>();                // Create subscription for active calls (real-time events)
                try
                {
                    var callSubscriptionId = await _subscriptionService.CreateSubscriptionAsync(
                        resource: "communications/calls",
                        changeType: "created,updated",
                        clientState: "TeamsComplianceBot-Calls-2025"
                    );

                    results.Add(new
                    {
                        type = "calls",
                        resource = "communications/calls",
                        subscriptionId = callSubscriptionId,
                        status = "success",
                        message = "Active calls subscription created successfully"
                    });

                    _logger.LogInformation("Created calls subscription: {SubscriptionId}", callSubscriptionId);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Failed to create calls subscription");
                    results.Add(new
                    {
                        type = "calls",
                        resource = "communications/calls",
                        subscriptionId = (string?)null,
                        status = "failed",
                        message = $"Failed to create calls subscription: {ex.Message}"
                    });
                }

                // Create subscription for call records (completed calls)
                try
                {
                    var callRecordSubscriptionId = await _subscriptionService.CreateSubscriptionAsync(
                        resource: "communications/callRecords",
                        changeType: "created",
                        clientState: "TeamsComplianceBot-CallRecords-2025"
                    );

                    results.Add(new
                    {
                        type = "callRecords",
                        resource = "communications/callRecords",
                        subscriptionId = callRecordSubscriptionId,
                        status = "success",
                        message = "Call records subscription created successfully"
                    });

                    _logger.LogInformation("Created call records subscription: {SubscriptionId}", callRecordSubscriptionId);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Failed to create call records subscription");
                    results.Add(new
                    {
                        type = "callRecords",
                        resource = "communications/callRecords",
                        subscriptionId = (string?)null,
                        status = "failed",
                        message = $"Failed to create call records subscription: {ex.Message}"
                    });
                }

                var successCount = results.Count(r => ((dynamic)r).status == "success");
                var overallSuccess = successCount > 0;

                return Ok(new
                {
                    success = overallSuccess,
                    subscriptionsCreated = successCount,
                    totalAttempted = results.Count,
                    message = overallSuccess 
                        ? $"Successfully created {successCount} of {results.Count} subscriptions"
                        : "Failed to create any subscriptions",
                    details = results,
                    timestamp = DateTimeOffset.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error creating Teams call subscriptions");
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Message,
                    message = "Failed to create Teams call subscriptions",
                    timestamp = DateTimeOffset.UtcNow
                });
            }
        }

        /// <summary>
        /// Lists all active subscriptions
        /// </summary>        [HttpGet("list")]
        public async Task<IActionResult> ListSubscriptions()
        {
            try
            {
                var subscriptions = await _subscriptionService.GetActiveSubscriptionsAsync();
                  return Ok(new
                {
                    success = true,
                    count = subscriptions?.Count() ?? 0,
                    subscriptions = subscriptions,
                    timestamp = DateTimeOffset.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error listing subscriptions");
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Message,
                    message = "Failed to list subscriptions",
                    timestamp = DateTimeOffset.UtcNow
                });
            }
        }

        /// <summary>
        /// Tests Graph API connectivity
        /// </summary>
        [HttpGet("test-connectivity")]
        public async Task<IActionResult> TestConnectivity()
        {            try
            {
                // Try to get existing subscriptions to test connectivity
                var subscriptions = await _subscriptionService.GetActiveSubscriptionsAsync();
                  return Ok(new
                {
                    success = true,
                    message = "Graph API connectivity test successful",
                    existingSubscriptions = subscriptions?.Count() ?? 0,
                    canCreateSubscriptions = true,
                    timestamp = DateTimeOffset.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Graph API connectivity test failed");
                return BadRequest(new
                {
                    success = false,
                    error = ex.Message,
                    message = "Graph API connectivity test failed. Check authentication and permissions.",
                    canCreateSubscriptions = false,
                    timestamp = DateTimeOffset.UtcNow
                });
            }
        }

        /// <summary>
        /// Deletes a specific subscription
        /// </summary>
        [HttpDelete("{subscriptionId}")]
        public async Task<IActionResult> DeleteSubscription(string subscriptionId)
        {
            try
            {
                var deleted = await _subscriptionService.DeleteSubscriptionAsync(subscriptionId);
                
                return Ok(new
                {
                    success = deleted,
                    subscriptionId = subscriptionId,
                    message = deleted ? "Subscription deleted successfully" : "Failed to delete subscription",
                    timestamp = DateTimeOffset.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error deleting subscription {SubscriptionId}", subscriptionId);
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Message,
                    subscriptionId = subscriptionId,
                    message = "Failed to delete subscription",
                    timestamp = DateTimeOffset.UtcNow
                });
            }
        }

        /// <summary>
        /// Renews a specific subscription
        /// </summary>
        [HttpPost("{subscriptionId}/renew")]
        public async Task<IActionResult> RenewSubscription(string subscriptionId)
        {
            try
            {
                var renewed = await _subscriptionService.RenewSubscriptionAsync(subscriptionId);
                
                return Ok(new
                {
                    success = renewed,
                    subscriptionId = subscriptionId,
                    message = renewed ? "Subscription renewed successfully" : "Failed to renew subscription",
                    timestamp = DateTimeOffset.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error renewing subscription {SubscriptionId}", subscriptionId);
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Message,
                    subscriptionId = subscriptionId,
                    message = "Failed to renew subscription",
                    timestamp = DateTimeOffset.UtcNow
                });
            }
        }

        /// <summary>
        /// Gets current subscription configuration and status
        /// </summary>
        [HttpGet("status")]
        public async Task<IActionResult> GetSubscriptionStatus()
        {            try
            {
                var subscriptions = await _subscriptionService.GetActiveSubscriptionsAsync();
                var notificationUrl = _configuration["Recording:NotificationUrl"];
                
                var callsSubscription = subscriptions?.FirstOrDefault(s => s.Resource?.Contains("communications/calls") == true);
                var callRecordsSubscription = subscriptions?.FirstOrDefault(s => s.Resource?.Contains("communications/callRecords") == true);

                return Ok(new
                {
                    success = true,
                    configuration = new
                    {
                        notificationUrl = notificationUrl,
                        botEndpoint = "https://arandiabot.ggunifiedtech.com"
                    },                    subscriptions = new
                    {
                        total = subscriptions?.Count() ?? 0,
                        calls = callsSubscription != null ? new
                        {
                            id = callsSubscription.Id,
                            resource = callsSubscription.Resource,
                            changeType = callsSubscription.ChangeType,
                            expirationDateTime = callsSubscription.ExpirationDateTime,
                            status = "active"
                        } : null,
                        callRecords = callRecordsSubscription != null ? new
                        {
                            id = callRecordsSubscription.Id,
                            resource = callRecordsSubscription.Resource,
                            changeType = callRecordsSubscription.ChangeType,
                            expirationDateTime = callRecordsSubscription.ExpirationDateTime,
                            status = "active"
                        } : null
                    },
                    recommendations = GetRecommendations(callsSubscription, callRecordsSubscription),
                    timestamp = DateTimeOffset.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting subscription status");
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Message,
                    message = "Failed to get subscription status",
                    timestamp = DateTimeOffset.UtcNow
                });
            }
        }

        /// <summary>
        /// Test a simple Graph API call to verify SSL connectivity
        /// </summary>
        [HttpGet("test-simple-graph-call")]
        public async Task<IActionResult> TestSimpleGraphCall()
        {
            try
            {
                _logger.LogInformation("Testing simple Graph API call for SSL connectivity");
                
                // Try to get the service principal (application) information
                var app = await _graphClient.Applications.GetAsync();
                
                return Ok(new
                {
                    success = true,
                    message = "Simple Graph API call successful",
                    applicationsFound = app?.Value?.Count ?? 0,
                    timestamp = DateTimeOffset.UtcNow
                });
            }
            catch (HttpRequestException httpEx)
            {                _logger.LogError(httpEx, "HTTP error in simple Graph API call");
                return Ok(new
                {
                    success = false,
                    message = $"HTTP error: {httpEx.Message}",
                    innerException = httpEx.InnerException?.Message,
                    timestamp = DateTimeOffset.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "General error in simple Graph API call");
                return Ok(new
                {
                    success = false,
                    message = $"Error: {ex.Message}",
                    type = ex.GetType().Name,
                    timestamp = DateTimeOffset.UtcNow
                });
            }
        }

        /// <summary>
        /// Check specific Microsoft Graph permissions for Teams calls
        /// </summary>
        [HttpGet("check-permissions")]
        public async Task<IActionResult> CheckTeamsCallPermissions()
        {
            try
            {
                _logger.LogInformation("Checking Microsoft Graph permissions for Teams calls");
                
                // Known permission IDs for Teams calls
                var requiredPermissions = new Dictionary<string, string>
                {
                    // Application permissions needed for Teams calls
                    ["Calls.AccessMedia.All"] = "a7a681dc-756e-4909-b988-f160edc6655f",
                    ["Calls.JoinGroupCall.All"] = "fd7ccf6b-3d28-418b-9701-cd10f5cd2fd4", 
                    ["Calls.JoinGroupCallAsGuest.All"] = "4c277553-8a09-487b-8023-29ee378d8324",
                    ["CallRecords.Read.All"] = "45bbb07e-7321-4fd7-a8f6-3ff27e6a81c8",
                    ["OnlineMeetings.ReadWrite.All"] = "b8bb2037-6e08-44ac-a4ea-4b8f6ee1e1d2",
                    
                    // Additional potentially useful permissions
                    ["User.Read.All"] = "df021288-bdef-4463-88db-98f22de89214",
                    ["Group.Read.All"] = "5b567255-7703-4780-807c-7be8301ae99b",
                    ["Directory.Read.All"] = "7ab1d382-f21e-4acd-a863-ba3e13f7da61"
                };

                // From the manifest, these are the permission IDs we have configured
                var configuredPermissionIds = new HashSet<string>
                {
                    "1abb026f-7572-49f6-9ddd-ad61cbba181e", // Role
                    "a2611786-80b3-417e-adaa-707d4261a5f0", // Role
                    "45bbb07e-7321-4fd7-a8f6-3ff27e6a81c8", // Role - CallRecords.Read.All ✓
                    "a7a681dc-756e-4909-b988-f160edc6655f", // Role - Calls.AccessMedia.All ✓
                    "284383ee-7f6e-4e40-a2a8-e85dcb029101", // Role
                    "4c277553-8a09-487b-8023-29ee378d8324", // Role - Calls.JoinGroupCallAsGuest.All ✓
                    "f6b49018-60ab-4f81-83bd-22caeabfed2d", // Role
                    "fd7ccf6b-3d28-418b-9701-cd10f5cd2fd4", // Role - Calls.JoinGroupCall.All ✓
                    "a3410be2-8e48-4f32-8454-c29a7465209d", // Role
                    "b9bb2381-47a4-46cd-aafb-00cb12f68504", // Role
                    "7ab1d382-f21e-4acd-a863-ba3e13f7da61", // Role - Directory.Read.All ✓
                    "a4a08342-c95d-476b-b943-97e100569c8d", // Role
                    "c1684f21-1984-47fa-9d61-2dc8c296bb70", // Role
                    "a4a80d8d-d283-4bd8-8504-555ec3870630", // Role
                    "ac3a2b8e-03a3-4da9-9ce0-cbe28bf1accd", // Role
                    "eb158f57-df43-4751-8b21-b8932adb3d34", // Role
                    "22b74aab-d9e4-46f7-9424-f24b42307227", // Role
                    "b448d252-1f26-4227-b6ff-21ab510975a2", // Role
                    "e97a9235-5b3c-43c4-b37d-6786a173fae4", // Role
                    "0fdf35a5-82f8-41ff-9ded-0b761cc73512", // Role
                    "cc7e7635-2586-41d6-adaa-a8d3bcad5ee5", // Role
                    "1f615aea-6bf9-4b05-84bd-46388e138537", // Role
                    "9ce09611-f4f7-4abd-a629-a05450422a97", // Role
                    "53d40ddb-9b27-4c97-b800-985be6041990", // Role
                    "93c6a289-70fd-489e-a053-6cf8f7d772f6", // Role
                    "44fb0e7c-1f9a-47f1-bb9e-7f92d48ed288", // Role
                    "6e74eff9-4a21-45d6-bc03-3a20f61f8281", // Role
                    "b0c13be0-8e20-4bc5-8c55-963c23a39ce9", // Role
                    "32ca478f-f89e-41d0-aaf8-101deb7da510", // Role
                    "ba1ba90b-2d8f-487e-9f16-80728d85bb5c", // Role
                    "1e4be56c-312e-42b8-a2c9-009600d732c0", // Role
                    "a87076cf-6abd-4e56-8559-4dbdf41bef96", // Role
                    "9e19bae1-2623-4c4f-ab6e-2664615ff9a0", // Role
                    "5dad17ba-f6cc-4954-a5a2-a0dcc95154f0", // Role
                    "74ef0291-ca83-4d02-8c7e-d2391e6a444f", // Role
                    "25bbeaad-04be-4207-83ed-a263aae76ddf", // Role
                    "7b5823ae-d0f2-424d-b90c-d843ffada7d9", // Role
                    "650a76ec-4118-4b25-9d3a-1f98048a5ee0", // Role
                    "73a45059-f39c-4baf-9182-4954ac0e55cf", // Role
                    "9f67436c-5415-4e7f-8ac1-3014a7132630", // Role
                    "908de74d-f8b2-4d6b-a9ed-2a17b3b78179"  // Role
                };

                var permissionStatus = new Dictionary<string, object>();
                
                foreach (var permission in requiredPermissions)
                {
                    var isConfigured = configuredPermissionIds.Contains(permission.Value);
                    permissionStatus[permission.Key] = new
                    {
                        permissionId = permission.Value,
                        isConfigured = isConfigured,
                        status = isConfigured ? "✓ Configured" : "❌ Missing"
                    };
                }

                // Check if we have admin consent
                bool hasAdminConsent = false;
                try
                {
                    // Try to make a call that requires admin consent
                    var apps = await _graphClient.Applications.GetAsync();
                    hasAdminConsent = true;
                }
                catch (Exception ex)
                {
                    _logger.LogWarning("Admin consent check failed: {Message}", ex.Message);
                    hasAdminConsent = ex.Message.Contains("Insufficient privileges") == false;
                }

                var missingPermissions = requiredPermissions
                    .Where(p => !configuredPermissionIds.Contains(p.Value))
                    .Select(p => p.Key)
                    .ToList();

                var result = new
                {
                    success = true,
                    hasAllRequiredPermissions = missingPermissions.Count == 0,
                    hasAdminConsent = hasAdminConsent,
                    permissionStatus = permissionStatus,
                    missingPermissions = missingPermissions,
                    summary = new
                    {
                        totalRequired = requiredPermissions.Count,
                        configured = requiredPermissions.Count - missingPermissions.Count,
                        missing = missingPermissions.Count
                    },
                    recommendation = missingPermissions.Count == 0 
                        ? (hasAdminConsent 
                            ? "All permissions configured and consented - subscription creation should work"
                            : "Permissions configured but may need admin consent")
                        : $"Missing {missingPermissions.Count} required permissions for Teams call subscriptions",
                    timestamp = DateTimeOffset.UtcNow
                };

                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error checking Teams call permissions");
                return Ok(new
                {
                    success = false,
                    message = $"Error checking permissions: {ex.Message}",
                    timestamp = DateTimeOffset.UtcNow
                });
            }
        }

        /// <summary>
        /// Decode Microsoft Graph permission IDs to understand granted permissions
        /// </summary>
        [HttpGet("decode-permissions")]
        public IActionResult DecodeAppPermissions()
        {
            try
            {
                // Common Microsoft Graph permission IDs and their meanings
                var graphPermissions = new Dictionary<string, string>
                {
                    // Delegated permissions (Type: Scope)
                    {"06da0dbc-49e2-44d2-8312-53f166ab848a", "Directory.Read.All (Delegated)"},
                    {"64a6cdd6-aab1-4aaf-94b8-3cc8405e90d0", "email (Delegated)"},
                    {"7427e0e9-2fba-42fe-b0c0-848c9e6a8182", "offline_access (Delegated)"},
                    {"37f7f235-527c-4136-accd-4a02d197296e", "openid (Delegated)"},
                    {"14dad69e-099b-42c9-810b-d002981feec1", "profile (Delegated)"},
                    {"5248dcb1-f83b-4ec3-9f4d-a4428a961a72", "User.Read (Delegated)"},
                    {"2da62c49-dfbd-40df-ba16-fef3529d391c", "User.ReadWrite (Delegated)"},
                    {"2e25a044-2580-450d-8859-42eeb6e996c0", "User.ReadBasic.All (Delegated)"},
                    {"093f8818-d05f-49b8-95bc-9d2a73e9a43c", "User.ReadWrite.All (Delegated)"},
                    {"207e0cb1-3ce7-4922-b991-5a760c346ebc", "User.ReadBasic.All (Delegated)"},
                    {"e1fe6dd8-ba31-4d61-89e7-88639da4683d", "User.Read.All (Delegated)"},
                    {"a154be20-db9c-4678-8ab7-66f6cc099a59", "User.ReadWrite.All (Delegated)"},

                    // Application permissions (Type: Role)
                    {"1abb026f-7572-49f6-9ddd-ad61cbba181e", "Calls.AccessMedia.All"},
                    {"a2611786-80b3-417e-adaa-707d4261a5f0", "Calls.JoinGroupCall.All"},
                    {"45bbb07e-7321-4fd7-a8f6-3ff27e6a81c8", "Calls.JoinGroupCallAsGuest.All"},
                    {"a7a681dc-756e-4909-b988-f160edc6655f", "CallRecords.Read.All"},
                    {"284383ee-7f6e-4e40-a2a8-e85dcb029101", "Calendars.Read"},
                    {"4c277553-8a09-487b-8023-29ee378d8324", "Calendars.ReadWrite"},
                    {"f6b49018-60ab-4f81-83bd-22caeabfed2d", "Contacts.Read"},
                    {"fd7ccf6b-3d28-418b-9701-cd10f5cd2fd4", "Contacts.ReadWrite"},
                    {"a3410be2-8e48-4f32-8454-c29a7465209d", "Directory.Read.All"},
                    {"b9bb2381-47a4-46cd-aafb-00cb12f68504", "Directory.ReadWrite.All"},
                    {"7ab1d382-f21e-4acd-a863-ba3e13f7da61", "Domain.Read.All"},
                    {"a4a08342-c95d-476b-b943-97e100569c8d", "Domain.ReadWrite.All"},
                    {"c1684f21-1984-47fa-9d61-2dc8c296bb70", "Group.Read.All"},
                    {"a4a80d8d-d283-4bd8-8504-555ec3870630", "Group.ReadWrite.All"},
                    {"ac3a2b8e-03a3-4da9-9ce0-cbe28bf1accd", "GroupMember.Read.All"},
                    {"eb158f57-df43-4751-8b21-b8932adb3d34", "GroupMember.ReadWrite.All"},
                    {"22b74aab-d9e4-46f7-9424-f24b42307227", "Mail.Read"},
                    {"b448d252-1f26-4227-b6ff-21ab510975a2", "Mail.ReadWrite"},
                    {"e97a9235-5b3c-43c4-b37d-6786a173fae4", "Mail.Send"},
                    {"0fdf35a5-82f8-41ff-9ded-0b761cc73512", "MailboxSettings.Read"},
                    {"cc7e7635-2586-41d6-adaa-a8d3bcad5ee5", "MailboxSettings.ReadWrite"},
                    {"1f615aea-6bf9-4b05-84bd-46388e138537", "Notes.Read.All"},
                    {"9ce09611-f4f7-4abd-a629-a05450422a97", "Notes.ReadWrite.All"},
                    {"53d40ddb-9b27-4c97-b800-985be6041990", "OnlineMeetings.Read.All"},
                    {"93c6a289-70fd-489e-a053-6cf8f7d772f6", "OnlineMeetings.ReadWrite.All"},
                    {"44fb0e7c-1f9a-47f1-bb9e-7f92d48ed288", "People.Read.All"},
                    {"6e74eff9-4a21-45d6-bc03-3a20f61f8281", "Sites.Read.All"},
                    {"b0c13be0-8e20-4bc5-8c55-963c23a39ce9", "Sites.ReadWrite.All"},
                    {"32ca478f-f89e-41d0-aaf8-101deb7da510", "Tasks.Read"},
                    {"ba1ba90b-2d8f-487e-9f16-80728d85bb5c", "Tasks.ReadWrite"},
                    {"1e4be56c-312e-42b8-a2c9-009600d732c0", "User.Export.All"},
                    {"a87076cf-6abd-4e56-8559-4dbdf41bef96", "User.Invite.All"},
                    {"9e19bae1-2623-4c4f-ab6e-2664615ff9a0", "User.ManageIdentities.All"},
                    {"5dad17ba-f6cc-4954-a5a2-a0dcc95154f0", "User.Read.All"},
                    {"74ef0291-ca83-4d02-8c7e-d2391e6a444f", "User.ReadWrite.All"},
                    {"25bbeaad-04be-4207-83ed-a263aae76ddf", "UserAuthenticationMethod.Read.All"},
                    {"7b5823ae-d0f2-424d-b90c-d843ffada7d9", "UserAuthenticationMethod.ReadWrite.All"},
                    {"650a76ec-4118-4b25-9d3a-1f98048a5ee0", "RoleManagement.Read.All"},
                    {"73a45059-f39c-4baf-9182-4954ac0e55cf", "RoleManagement.ReadWrite.All"},
                    {"9f67436c-5415-4e7f-8ac1-3014a7132630", "Application.Read.All"},
                    {"908de74d-f8b2-4d6b-a9ed-2a17b3b78179", "Application.ReadWrite.All"}
                };

                var decodedPermissions = manifestPermissions
                    .Select(id => new { Id = id, Permission = graphPermissions.GetValueOrDefault(id, "Unknown Permission") })
                    .ToList();

                var teamsCallPermissions = decodedPermissions
                    .Where(p => p.Permission.Contains("Calls.") || p.Permission.Contains("CallRecords."))
                    .ToList();

                return Ok(new
                {
                    success = true,
                    totalPermissions = decodedPermissions.Count,
                    teamsCallPermissions = teamsCallPermissions,
                    allPermissions = decodedPermissions,
                    keyPermissionsFound = new
                    {
                        callsAccessMedia = teamsCallPermissions.Any(p => p.Permission.Contains("Calls.AccessMedia.All")),
                        callsJoinGroupCall = teamsCallPermissions.Any(p => p.Permission.Contains("Calls.JoinGroupCall.All")),
                        callsJoinGroupCallAsGuest = teamsCallPermissions.Any(p => p.Permission.Contains("Calls.JoinGroupCallAsGuest.All")),
                        callRecordsRead = teamsCallPermissions.Any(p => p.Permission.Contains("CallRecords.Read.All"))
                    },
                    timestamp = DateTime.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error decoding app permissions");
                return StatusCode(500, new
                {
                    success = false,
                    message = $"Error decoding permissions: {ex.Message}",
                    timestamp = DateTime.UtcNow
                });
            }
        }        /// <summary>
        /// Test SSL/TLS configuration fixes for Microsoft Graph API
        /// </summary>
        [HttpPost("test-ssl-fix")]
        public async Task<IActionResult> TestSslFix()
        {
            try
            {
                _logger.LogInformation("Testing SSL/TLS configuration fixes");

                var diagnostics = new List<object>();

                // 1. Test runtime version and SSL support
                diagnostics.Add(new
                {
                    testName = "Runtime Environment",
                    dotnetVersion = Environment.Version.ToString(),
                    osVersion = Environment.OSVersion.ToString(),
                    timestamp = DateTime.UtcNow
                });

                // 2. Test HttpClient with specific TLS settings
                using var httpClientHandler = new HttpClientHandler()
                {
                    SslProtocols = SslProtocols.Tls12 | SslProtocols.Tls13,
                    ServerCertificateCustomValidationCallback = (message, cert, chain, errors) =>
                    {
                        _logger.LogInformation($"SSL Certificate validation: {errors}");
                        return errors == System.Net.Security.SslPolicyErrors.None;
                    }
                };

                using var httpClient = new HttpClient(httpClientHandler);
                httpClient.DefaultRequestHeaders.Add("User-Agent", "TeamsComplianceBot/1.0");

                // 3. Test direct HTTPS call to Microsoft Graph
                try
                {
                    var response = await httpClient.GetAsync("https://graph.microsoft.com/v1.0/$metadata");
                    diagnostics.Add(new
                    {
                        testName = "Direct HTTPS to Graph Metadata",
                        success = response.IsSuccessStatusCode,
                        statusCode = response.StatusCode,
                        headers = response.Headers.Select(h => $"{h.Key}: {string.Join(", ", h.Value)}").ToList(),
                        timestamp = DateTime.UtcNow
                    });
                }
                catch (Exception ex)
                {
                    diagnostics.Add(new
                    {
                        testName = "Direct HTTPS to Graph Metadata",
                        success = false,
                        error = ex.Message,
                        innerException = ex.InnerException?.Message,
                        timestamp = DateTime.UtcNow
                    });
                }

                // 4. Test with authentication headers
                try
                {
                    var token = await GetAccessTokenAsync();
                    if (!string.IsNullOrEmpty(token))
                    {
                        httpClient.DefaultRequestHeaders.Authorization = 
                            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                        
                        var response = await httpClient.GetAsync("https://graph.microsoft.com/v1.0/me");
                        diagnostics.Add(new
                        {
                            testName = "Authenticated Graph API Call",
                            success = response.IsSuccessStatusCode,
                            statusCode = response.StatusCode,
                            timestamp = DateTime.UtcNow
                        });
                    }
                    else
                    {
                        diagnostics.Add(new
                        {
                            testName = "Authenticated Graph API Call",
                            success = false,
                            error = "Failed to get access token",
                            timestamp = DateTime.UtcNow
                        });
                    }
                }
                catch (Exception ex)
                {
                    diagnostics.Add(new
                    {
                        testName = "Authenticated Graph API Call",
                        success = false,
                        error = ex.Message,
                        innerException = ex.InnerException?.Message,
                        timestamp = DateTime.UtcNow
                    });
                }

                // 5. Test Graph SDK with SSL fixes
                try
                {
                    var me = await _graphClient.Me.GetAsync();
                    diagnostics.Add(new
                    {
                        testName = "Graph SDK with SSL fixes",
                        success = me != null,
                        userInfo = me?.DisplayName ?? "Unknown",
                        timestamp = DateTime.UtcNow
                    });
                }
                catch (Exception ex)
                {
                    diagnostics.Add(new
                    {
                        testName = "Graph SDK with SSL fixes",
                        success = false,
                        error = ex.Message,
                        innerException = ex.InnerException?.Message,
                        timestamp = DateTime.UtcNow
                    });
                }

                return Ok(new
                {
                    success = true,
                    message = "SSL/TLS diagnostic tests completed",
                    diagnostics = diagnostics,
                    recommendations = new[]
                    {
                        "Ensure TLS 1.2 or higher is enabled",
                        "Verify certificate validation callback",
                        "Check Azure App Service SSL/TLS settings", 
                        "Consider using Azure Key Vault for certificate management"
                    },
                    timestamp = DateTime.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in SSL/TLS configuration test");
                return StatusCode(500, new
                {
                    success = false,
                    message = $"SSL/TLS test failed: {ex.Message}",
                    timestamp = DateTime.UtcNow
                });
            }
        }

        /// <summary>
        /// Helper method to get access token for testing
        /// </summary>
        private async Task<string?> GetAccessTokenAsync()
        {
            try
            {
                var clientId = _configuration["MicrosoftAppId"];
                var clientSecret = _configuration["MicrosoftAppPassword"];
                
                if (string.IsNullOrEmpty(clientId) || string.IsNullOrEmpty(clientSecret))
                {
                    return null;
                }

                using var httpClient = new HttpClient();
                var content = new FormUrlEncodedContent(new[]
                {
                    new KeyValuePair<string, string>("grant_type", "client_credentials"),
                    new KeyValuePair<string, string>("client_id", clientId),
                    new KeyValuePair<string, string>("client_secret", clientSecret),
                    new KeyValuePair<string, string>("scope", "https://graph.microsoft.com/.default")
                });

                var response = await httpClient.PostAsync("https://login.microsoftonline.com/common/oauth2/v2.0/token", content);
                if (response.IsSuccessStatusCode)
                {
                    var json = await response.Content.ReadAsStringAsync();
                    var tokenResponse = JsonSerializer.Deserialize<JsonElement>(json);
                    return tokenResponse.GetProperty("access_token").GetString();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to get access token");
            }
            return null;
        }

        private List<string> GetRecommendations(object? callsSubscription, object? callRecordsSubscription)
        {
            var recommendations = new List<string>();

            if (callsSubscription == null)
            {
                recommendations.Add("Create calls subscription for real-time call events: POST /api/subscriptions/create-teams-calls");
            }

            if (callRecordsSubscription == null)
            {
                recommendations.Add("Create call records subscription for completed call notifications");
            }

            if (callsSubscription == null && callRecordsSubscription == null)
            {
                recommendations.Add("CRITICAL: No subscriptions found. Bot cannot detect Teams calls.");
                recommendations.Add("1. Verify Graph API permissions (Calls.AccessMedia.All, etc.)");
                recommendations.Add("2. Ensure admin consent is granted");
                recommendations.Add("3. Check authentication configuration");
            }

            return recommendations;
        }

        /// <summary>
        /// Test creating subscriptions with direct HTTP client approach
        /// </summary>
        [HttpPost("test-direct-subscription")]
        public async Task<IActionResult> TestDirectSubscription()
        {
            try
            {
                _logger.LogInformation("Testing direct HTTP subscription creation");

                // Get configuration
                var notificationUrl = _configuration["Recording:NotificationUrl"];
                var tenantId = _configuration["AzureAd:TenantId"];
                var clientId = _configuration["MicrosoftAppId"];
                var clientSecret = _configuration["MicrosoftAppPassword"];

                if (string.IsNullOrEmpty(notificationUrl) || string.IsNullOrEmpty(tenantId) || 
                    string.IsNullOrEmpty(clientId) || string.IsNullOrEmpty(clientSecret))
                {
                    return BadRequest(new
                    {
                        success = false,
                        message = "Missing required configuration values",
                        timestamp = DateTime.UtcNow
                    });
                }

                // Step 1: Get access token using direct HTTP
                var token = await GetDirectAccessTokenAsync(tenantId, clientId, clientSecret);
                if (string.IsNullOrEmpty(token))
                {
                    return StatusCode(500, new
                    {
                        success = false,
                        message = "Failed to get access token",
                        timestamp = DateTime.UtcNow
                    });
                }

                // Step 2: Create subscription using direct HTTP with our SSL-configured client
                using var httpClientHandler = new HttpClientHandler()
                {
                    SslProtocols = SslProtocols.Tls12 | SslProtocols.Tls13,
                    ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) =>
                    {
                        _logger.LogInformation($"Direct subscription SSL validation - Policy Errors: {sslPolicyErrors}");
                        if (cert != null)
                        {
                            _logger.LogInformation($"Direct subscription SSL - Certificate Subject: {cert.Subject}");
                            _logger.LogInformation($"Direct subscription SSL - Certificate Issuer: {cert.Issuer}");
                        }
                        
                        // If there are no SSL policy errors, certificate is valid
                        if (sslPolicyErrors == System.Net.Security.SslPolicyErrors.None)
                        {
                            _logger.LogInformation("Direct subscription SSL certificate validation passed - No errors");
                            return true;
                        }
                        
                        // For Microsoft endpoints, be more permissive
                        if (cert != null)
                        {
                            var subject = cert.Subject?.ToLowerInvariant() ?? "";
                            var issuer = cert.Issuer?.ToLowerInvariant() ?? "";
                            
                            var isMicrosoftCert = subject.Contains("microsoft.com") || 
                                                subject.Contains("graph.microsoft.com") ||
                                                subject.Contains("login.microsoftonline.com") ||
                                                subject.Contains("azure.com") ||
                                                issuer.Contains("microsoft") ||
                                                issuer.Contains("digicert") ||
                                                issuer.Contains("baltimore") ||
                                                issuer.Contains("cybertrust");
                                                
                            if (isMicrosoftCert)
                            {
                                var hasCriticalErrors = sslPolicyErrors.HasFlag(System.Net.Security.SslPolicyErrors.RemoteCertificateNotAvailable) ||
                                                      (chain?.ChainStatus?.Any(status => status.Status == System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.Revoked) ?? false);
                                
                                if (!hasCriticalErrors)
                                {
                                    _logger.LogInformation($"Direct subscription: Allowing Microsoft certificate despite minor SSL policy errors: {sslPolicyErrors}");
                                    return true;
                                }
                            }
                        }
                        
                        _logger.LogError($"Direct subscription: SSL certificate validation failed with errors: {sslPolicyErrors}");
                        return false;
                    }
                };

                using var httpClient = new HttpClient(httpClientHandler);
                httpClient.DefaultRequestHeaders.Authorization = 
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                httpClient.DefaultRequestHeaders.Add("User-Agent", "TeamsComplianceBot/1.0");

                // Create subscription payload
                var subscriptionPayload = new
                {
                    resource = "users",  // Start with a simple resource
                    changeType = "created,updated",
                    notificationUrl = notificationUrl,
                    expirationDateTime = DateTimeOffset.UtcNow.AddHours(1).ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
                    clientState = "TeamsComplianceBot-DirectTest-2025"
                };

                var jsonPayload = JsonSerializer.Serialize(subscriptionPayload);
                var content = new StringContent(jsonPayload, System.Text.Encoding.UTF8, "application/json");

                // Make the subscription request
                var response = await httpClient.PostAsync("https://graph.microsoft.com/v1.0/subscriptions", content);
                var responseContent = await response.Content.ReadAsStringAsync();

                return Ok(new
                {
                    success = response.IsSuccessStatusCode,
                    statusCode = response.StatusCode,
                    responseContent = responseContent,
                    subscriptionPayload = subscriptionPayload,
                    timestamp = DateTime.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in direct subscription test");
                return StatusCode(500, new
                {
                    success = false,
                    message = $"Direct subscription test failed: {ex.Message}",
                    innerException = ex.InnerException?.Message,
                    timestamp = DateTime.UtcNow
                });
            }
        }

        /// <summary>
        /// Get access token using direct HTTP approach
        /// </summary>
        private async Task<string?> GetDirectAccessTokenAsync(string tenantId, string clientId, string clientSecret)
        {
            try
            {
                using var httpClientHandler = new HttpClientHandler()
                {
                    SslProtocols = SslProtocols.Tls12 | SslProtocols.Tls13
                };

                using var httpClient = new HttpClient(httpClientHandler);
                var content = new FormUrlEncodedContent(new[]
                {
                    new KeyValuePair<string, string>("grant_type", "client_credentials"),
                    new KeyValuePair<string, string>("client_id", clientId),
                    new KeyValuePair<string, string>("client_secret", clientSecret),
                    new KeyValuePair<string, string>("scope", "https://graph.microsoft.com/.default")
                });

                var response = await httpClient.PostAsync($"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token", content);
                if (response.IsSuccessStatusCode)
                {
                    var json = await response.Content.ReadAsStringAsync();
                    var tokenResponse = JsonSerializer.Deserialize<JsonElement>(json);
                    return tokenResponse.GetProperty("access_token").GetString();
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    _logger.LogError($"Token acquisition failed. Status: {response.StatusCode}, Content: {errorContent}");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to get direct access token");
            }
            return null;
        }

        /// <summary>
        /// Test creating subscriptions for call records only (which we have permissions for)
        /// </summary>
        [HttpPost("create-call-records-only")]
        public async Task<IActionResult> CreateCallRecordsSubscription()
        {
            try
            {
                _logger.LogInformation("Testing call records subscription creation (permissions we have)");

                var notificationUrl = _configuration["Recording:NotificationUrl"];
                if (string.IsNullOrEmpty(notificationUrl))
                {
                    return BadRequest(new
                    {
                        success = false,
                        message = "NotificationUrl not configured",
                        timestamp = DateTimeOffset.UtcNow
                    });
                }

                _logger.LogInformation("Creating call records subscription with notification URL: {NotificationUrl}", notificationUrl);                // Create subscription for call records only (we have CallRecords.Read.All permission)
                var subscription = new Microsoft.Graph.Models.Subscription
                {
                    Resource = "communications/callRecords",
                    ChangeType = "created",
                    NotificationUrl = notificationUrl,
                    ExpirationDateTime = DateTimeOffset.UtcNow.AddHours(1), // Start with 1 hour for testing
                    ClientState = "TeamsComplianceBot-CallRecords-2025"
                };

                _logger.LogInformation("Attempting to create call records subscription: {Resource} with changeType: {ChangeType}", 
                    subscription.Resource, subscription.ChangeType);

                var createdSubscription = await _graphClient.Subscriptions.PostAsync(subscription);

                if (createdSubscription != null)
                {
                    _logger.LogInformation("Successfully created call records subscription: {SubscriptionId}", createdSubscription.Id);
                    
                    return Ok(new
                    {
                        success = true,
                        subscription = new
                        {
                            id = createdSubscription.Id,
                            resource = createdSubscription.Resource,
                            changeType = createdSubscription.ChangeType,
                            notificationUrl = createdSubscription.NotificationUrl,
                            expirationDateTime = createdSubscription.ExpirationDateTime,
                            clientState = createdSubscription.ClientState
                        },
                        message = "Call records subscription created successfully - this proves our notification endpoint works!",
                        nextSteps = new[]
                        {
                            "Monitor /api/notifications endpoint for call record notifications",
                            "Add missing permissions (OnlineMeetings.ReadWrite.All, User.Read.All, Group.Read.All) for full Teams call support",
                            "Test creating communications/calls subscriptions after permissions are added"
                        },
                        timestamp = DateTimeOffset.UtcNow
                    });
                }
                else
                {
                    return StatusCode(500, new
                    {
                        success = false,
                        message = "Subscription creation returned null",
                        timestamp = DateTime.UtcNow
                    });
                }
            }            catch (Microsoft.Graph.Models.ODataErrors.ODataError ex)
            {
                _logger.LogError(ex, "Microsoft Graph error creating call records subscription");
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Error?.Code,
                    message = ex.Error?.Message,
                    details = ex.Error?.Details?.Select(d => new { d.Code, d.Message }),
                    timestamp = DateTimeOffset.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Unexpected error creating call records subscription");
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Message,
                    type = ex.GetType().Name,
                    timestamp = DateTimeOffset.UtcNow
                });
            }        /// <summary>
        /// Test creating subscriptions using direct Azure App Service URL (not Front Door or azurefd.net)
        /// </summary>
        [HttpPost("create-call-records-direct")]
        public async Task<IActionResult> CreateCallRecordsSubscriptionDirect()
        {
            try
            {
                _logger.LogInformation("Testing call records subscription with direct Azure App Service URL");

                // Use ONLY the direct Azure App Service URL - no Front Door or azurefd.net domains
                var directAppServiceUrl = "https://arandiabot.ggunifiedtech.com/api/notifications";
                
                _logger.LogInformation("Creating call records subscription with direct URL: {NotificationUrl}", directAppServiceUrl);

                // Create subscription for call records only (we have CallRecords.Read.All permission)
                var subscription = new Microsoft.Graph.Models.Subscription
                {
                    Resource = "communications/callRecords",
                    ChangeType = "created",
                    NotificationUrl = directAppServiceUrl, // Use direct URL only
                    ExpirationDateTime = DateTimeOffset.UtcNow.AddHours(1), // Start with 1 hour for testing
                    ClientState = "TeamsComplianceBot-Direct-2025"
                };

                _logger.LogInformation("Attempting to create call records subscription with direct URL: {Resource} with changeType: {ChangeType}", 
                    subscription.Resource, subscription.ChangeType);

                var createdSubscription = await _graphClient.Subscriptions.PostAsync(subscription);

                if (createdSubscription != null)
                {
                    _logger.LogInformation("Successfully created call records subscription with direct URL: {SubscriptionId}", createdSubscription.Id);
                    
                    return Ok(new
                    {
                        success = true,
                        subscription = new
                        {
                            id = createdSubscription.Id,
                            resource = createdSubscription.Resource,
                            changeType = createdSubscription.ChangeType,
                            notificationUrl = createdSubscription.NotificationUrl,
                            expirationDateTime = createdSubscription.ExpirationDateTime,
                            clientState = createdSubscription.ClientState
                        },
                        message = "🎉 SUCCESS! Call records subscription created with direct URL!",
                        analysis = "Direct custom domain URL works for Microsoft Graph webhook validation",
                        nextSteps = new[]
                        {
                            "Monitor /api/notifications endpoint for incoming call record notifications",
                            "Update appsettings.json to use this direct URL as default",
                            "Create additional subscriptions for other Teams resources as needed",
                            "The webhook validation fix is working correctly!"
                        },
                        timestamp = DateTimeOffset.UtcNow
                    });
                }
                else
                {
                    return StatusCode(500, new
                    {
                        success = false,
                        message = "Direct URL subscription creation returned null",
                        timestamp = DateTime.UtcNow
                    });
                }
            }
            catch (Microsoft.Graph.Models.ODataErrors.ODataError ex)
            {
                _logger.LogError(ex, "Microsoft Graph error creating call records subscription with direct URL");
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Error?.Code,
                    message = ex.Error?.Message,
                    details = ex.Error?.Details?.Select(d => new { d.Code, d.Message }),
                    analysis = "Direct URL failed - check DNS resolution and SSL certificate for custom domain",
                    timestamp = DateTimeOffset.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Unexpected error creating call records subscription with direct URL");
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Message,
                    type = ex.GetType().Name,
                    timestamp = DateTimeOffset.UtcNow
                });
            }
        }

        /// <summary>
        /// Test creating subscriptions using Azure Front Door endpoint
        /// </summary>
        [HttpPost("create-call-records-frontdoor")]
        public async Task<IActionResult> CreateCallRecordsSubscriptionFrontDoor()
        {
            try
            {
                _logger.LogInformation("Testing call records subscription with Azure Front Door URL");

                // Use Azure Front Door endpoint from the screenshot
                var frontDoorNotificationUrl = "https://arandiabot-gphvaafhcc8b3c5.z03.azurefd.net/api/notifications";
                
                _logger.LogInformation("Creating call records subscription with Front Door URL: {NotificationUrl}", frontDoorNotificationUrl);

                // Create subscription for call records only (we have CallRecords.Read.All permission)
                var subscription = new Microsoft.Graph.Models.Subscription
                {
                    Resource = "communications/callRecords",
                    ChangeType = "created",
                    NotificationUrl = frontDoorNotificationUrl, // Use Front Door URL
                    ExpirationDateTime = DateTimeOffset.UtcNow.AddHours(1), // Start with 1 hour for testing
                    ClientState = "TeamsComplianceBot-FrontDoor-Test-2025"
                };

                _logger.LogInformation("Attempting to create call records subscription with Front Door: {Resource} with changeType: {ChangeType}", 
                    subscription.Resource, subscription.ChangeType);

                var createdSubscription = await _graphClient.Subscriptions.PostAsync(subscription);

                if (createdSubscription != null)
                {
                    _logger.LogInformation("Successfully created call records subscription with Front Door URL: {SubscriptionId}", createdSubscription.Id);
                    
                    return Ok(new
                    {
                        success = true,
                        subscription = new
                        {
                            id = createdSubscription.Id,
                            resource = createdSubscription.Resource,
                            changeType = createdSubscription.ChangeType,
                            notificationUrl = createdSubscription.NotificationUrl,
                            expirationDateTime = createdSubscription.ExpirationDateTime,
                            clientState = createdSubscription.ClientState
                        },
                        message = "SUCCESS! Call records subscription with Azure Front Door created!",
                        analysis = "Azure Front Door resolved the webhook validation issue - Microsoft Graph can now reach our endpoint",
                        nextSteps = new[]
                        {
                            "Update appsettings.json to use Front Door URL as default notification endpoint",
                            "Create Teams call subscriptions using the Front Door endpoint",
                            "Monitor /api/notifications for incoming call record notifications",
                            "Front Door provides better global accessibility and SSL handling"
                        },
                        frontDoorBenefits = new[]
                        {
                            "Global load balancing and routing",
                            "Better SSL/TLS certificate handling", 
                            "DDoS protection and caching",
                            "Higher availability and performance",
                            "Microsoft Graph can reliably reach the endpoint"
                        },
                        timestamp = DateTimeOffset.UtcNow
                    });
                }
                else
                {
                    return StatusCode(500, new
                    {
                        success = false,
                        message = "Front Door subscription creation returned null",
                        timestamp = DateTime.UtcNow
                    });
                }
            }
            catch (Microsoft.Graph.Models.ODataErrors.ODataError ex)
            {
                _logger.LogError(ex, "Microsoft Graph error creating call records subscription with Front Door");
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Error?.Code,
                    message = ex.Error?.Message,
                    details = ex.Error?.Details?.Select(d => new { d.Code, d.Message }),
                    analysis = "Even Front Door failed - may need to check Front Door routing rules or origin configuration",
                    timestamp = DateTimeOffset.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Unexpected error creating call records subscription with Front Door");
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Message,
                    type = ex.GetType().Name,
                    timestamp = DateTimeOffset.UtcNow
                });
            }
        }

        /// <summary>
        /// Test creating a subscription with webhook.site to isolate our endpoint issues
        /// </summary>
        [HttpPost("test-webhook-site")]
        public async Task<IActionResult> TestWebhookSiteSubscription()
        {
            try
            {
                _logger.LogInformation("Testing Microsoft Graph subscription with webhook.site");

                // Use webhook.site for testing
                var webhookSiteUrl = "https://webhook.site/87654321-abcd-1234-teams-compliance-test";
                
                _logger.LogInformation("Creating test subscription with webhook.site: {WebhookUrl}", webhookSiteUrl);

                var subscription = new Microsoft.Graph.Models.Subscription
                {
                    Resource = "communications/callRecords",
                    ChangeType = "created",
                    NotificationUrl = webhookSiteUrl,
                    ExpirationDateTime = DateTimeOffset.UtcNow.AddMinutes(30),
                    ClientState = "TeamsComplianceBot-WebhookSite-Test"
                };

                var createdSubscription = await _graphClient.Subscriptions.PostAsync(subscription);

                if (createdSubscription != null)
                {
                    return Ok(new
                    {
                        success = true,
                        message = "🎉 SUCCESS! Microsoft Graph can create subscriptions - the issue is with our endpoint accessibility",
                        subscription = new
                        {
                            id = createdSubscription.Id,
                            resource = createdSubscription.Resource,
                            webhookSiteUrl = webhookSiteUrl
                        },
                        analysis = "Microsoft Graph API authentication and permissions work correctly",
                        recommendation = "The issue is Microsoft Graph cannot reach our notification endpoint for validation",
                        possibleSolutions = new[]
                        {
                            "Check Front Door routing rules and SSL certificate configuration",
                            "Verify DNS propagation for custom domain",
                            "Consider using a public cloud webhook testing service temporarily",
                            "Check if Microsoft Graph IPs are blocked by firewall rules",
                            "Try direct Azure App Service URL without Front Door"
                        },
                        nextSteps = new[]
                        {
                            "Delete this test subscription: DELETE /api/subscriptions/{id}",
                            "Fix endpoint accessibility issues",
                            "Retry subscription creation with our fixed endpoint"
                        },
                        timestamp = DateTimeOffset.UtcNow
                    });
                }
                else
                {
                    return StatusCode(500, new { success = false, message = "Subscription returned null" });
                }
            }
            catch (Microsoft.Graph.Models.ODataErrors.ODataError ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Error?.Code,
                    message = ex.Error?.Message,
                    analysis = "Microsoft Graph API failed even with external webhook - authentication or permission issue",
                    timestamp = DateTimeOffset.UtcNow
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Message,
                    timestamp = DateTimeOffset.UtcNow
                });
            }
        }        /// <summary>
        /// Test our notification endpoint directly to simulate Microsoft Graph webhook validation
        /// </summary>
        [HttpPost("test-notification-endpoint")]
        public async Task<IActionResult> TestNotificationEndpoint()
        {
            try
            {
                _logger.LogInformation("Testing our notification endpoint with simulated Microsoft Graph validation");

                var results = new List<object>();
                // Only test the valid custom domain URL - no azurefd.net or azurewebsites.net
                var testUrls = new[]
                {
                    "https://arandiabot.ggunifiedtech.com/api/notifications"
                };

                using var httpClient = new HttpClient();
                httpClient.DefaultRequestHeaders.Add("User-Agent", "Microsoft-Graph-ChangeNotifications/1.0");

                foreach (var testUrl in testUrls)
                {
                    try
                    {
                        var validationToken = Guid.NewGuid().ToString();
                        
                        _logger.LogInformation("Testing POST validation for URL: {TestUrl}", testUrl);

                        // Test POST request with validationToken as query parameter (correct Microsoft Graph behavior)
                        var testUrlWithToken = $"{testUrl}?validationToken={validationToken}";
                        var response = await httpClient.PostAsync(testUrlWithToken, null);
                        var responseContent = await response.Content.ReadAsStringAsync();

                        var success = response.IsSuccessStatusCode && responseContent == validationToken;

                        results.Add(new
                        {
                            url = testUrl,
                            method = "POST",
                            success = success,
                            statusCode = (int)response.StatusCode,
                            responseContent = responseContent,
                            expectedToken = validationToken,
                            tokenMatch = responseContent == validationToken,
                            headers = response.Headers.Select(h => $"{h.Key}: {string.Join(", ", h.Value)}").ToList(),
                            timestamp = DateTime.UtcNow
                        });

                        if (success)
                        {
                            _logger.LogInformation("✅ POST Validation successful for {TestUrl}", testUrl);
                        }
                        else
                        {
                            _logger.LogWarning("❌ POST Validation failed for {TestUrl}: Status={StatusCode}, Content={Content}", 
                                testUrl, response.StatusCode, responseContent);
                        }

                        // Also test GET request for completeness
                        var getResponse = await httpClient.GetAsync(testUrlWithToken);
                        var getResponseContent = await getResponse.Content.ReadAsStringAsync();
                        var getSuccess = getResponse.IsSuccessStatusCode && getResponseContent == validationToken;

                        results.Add(new
                        {
                            url = testUrl,
                            method = "GET",
                            success = getSuccess,
                            statusCode = (int)getResponse.StatusCode,
                            responseContent = getResponseContent,
                            expectedToken = validationToken,
                            tokenMatch = getResponseContent == validationToken,
                            headers = getResponse.Headers.Select(h => $"{h.Key}: {string.Join(", ", h.Value)}").ToList(),
                            timestamp = DateTime.UtcNow
                        });

                        if (getSuccess)
                        {
                            _logger.LogInformation("✅ GET Validation successful for {TestUrl}", testUrl);
                        }
                        else
                        {
                            _logger.LogWarning("❌ GET Validation failed for {TestUrl}: Status={StatusCode}, Content={Content}", 
                                testUrl, getResponse.StatusCode, getResponseContent);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "Error testing URL: {TestUrl}", testUrl);
                        results.Add(new
                        {
                            url = testUrl,
                            success = false,
                            error = ex.Message,
                            timestamp = DateTime.UtcNow
                        });
                    }
                }

                var successfulTests = results.Where(r => r.GetType().GetProperty("success")?.GetValue(r) as bool? == true).Count();
                var totalTests = results.Count;

                return Ok(new
                {
                    success = successfulTests > 0,
                    message = $"Notification endpoint validation test completed: {successfulTests}/{totalTests} tests successful",
                    results = results,
                    analysis = successfulTests == totalTests ? 
                        "All validation tests passed - endpoint correctly handles both GET and POST requests with validationToken" :
                        $"Some tests failed - endpoint validation needs fixing",
                    nextSteps = successfulTests > 0 ? new[]
                    {
                        "✅ Endpoint validation is working correctly",
                        "🚀 Try creating Microsoft Graph subscriptions",
                        "📊 Monitor /api/notifications for actual webhook notifications",
                        "🔧 Add additional Teams resource subscriptions as needed"
                    } : new[]
                    {
                        "❌ Fix notification endpoint validation response",
                        "Ensure POST /api/notifications?validationToken=XXX returns the token as plain text",
                        "Check NotificationsController POST method implementation"
                    },
                    timestamp = DateTimeOffset.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error testing notification endpoint");
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Message,
                    timestamp = DateTimeOffset.UtcNow
                });
            }
        }

        /// <summary>
        /// Create subscription for live Teams calls (communications/calls)
        /// </summary>
        [HttpPost("create-teams-calls-subscription")]
        public async Task<IActionResult> CreateTeamsCallsSubscription()
        {
            try
            {
                _logger.LogInformation("Creating subscription for live Teams calls");

                var notificationUrl = "https://arandiabot.ggunifiedtech.com/api/notifications";
                
                _logger.LogInformation("Creating Teams calls subscription with URL: {NotificationUrl}", notificationUrl);

                // Create subscription for live calls (requires Calls.AccessMedia.All, Calls.JoinGroupCall.All)
                var subscription = new Microsoft.Graph.Models.Subscription
                {
                    Resource = "communications/calls",
                    ChangeType = "created,updated",
                    NotificationUrl = notificationUrl,
                    ExpirationDateTime = DateTimeOffset.UtcNow.AddHours(1), // Start with 1 hour
                    ClientState = "TeamsComplianceBot-LiveCalls-2025"
                };

                _logger.LogInformation("Attempting to create Teams calls subscription: {Resource} with changeType: {ChangeType}", 
                    subscription.Resource, subscription.ChangeType);

                var createdSubscription = await _graphClient.Subscriptions.PostAsync(subscription);

                if (createdSubscription != null)
                {
                    _logger.LogInformation("Successfully created Teams calls subscription: {SubscriptionId}", createdSubscription.Id);
                    
                    return Ok(new
                    {
                        success = true,
                        subscription = new
                        {
                            id = createdSubscription.Id,
                            resource = createdSubscription.Resource,
                            changeType = createdSubscription.ChangeType,
                            notificationUrl = createdSubscription.NotificationUrl,
                            expirationDateTime = createdSubscription.ExpirationDateTime,
                            clientState = createdSubscription.ClientState
                        },
                        message = "🎉 SUCCESS! Live Teams calls subscription created!",
                        analysis = "Bot can now receive real-time notifications when Teams calls are created or updated",
                        capabilities = new[]
                        {
                            "Real-time call start notifications",
                            "Call state change notifications",
                            "Participant join/leave events",
                            "Call end notifications"
                        },
                        nextSteps = new[]
                        {
                            "Monitor /api/notifications for live call events",
                            "Bot can now join calls automatically when notified",
                            "Extend subscription before expiration",
                            "Create online meetings subscription for calendar events"
                        },
                        timestamp = DateTimeOffset.UtcNow
                    });
                }
                else
                {
                    return StatusCode(500, new
                    {
                        success = false,
                        message = "Teams calls subscription creation returned null",
                        timestamp = DateTime.UtcNow
                    });
                }
            }
            catch (Microsoft.Graph.Models.ODataErrors.ODataError ex)
            {
                _logger.LogError(ex, "Microsoft Graph error creating Teams calls subscription");
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Error?.Code,
                    message = ex.Error?.Message,
                    details = ex.Error?.Details?.Select(d => new { d.Code, d.Message }),
                    analysis = "May need additional permissions: Calls.AccessMedia.All, Calls.JoinGroupCall.All, OnlineMeetings.ReadWrite.All",
                    timestamp = DateTimeOffset.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Unexpected error creating Teams calls subscription");
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Message,
                    type = ex.GetType().Name,
                    timestamp = DateTimeOffset.UtcNow
                });
            }
        }

        /// <summary>
        /// Create subscription for online meetings (calendar events)
        /// </summary>
        [HttpPost("create-online-meetings-subscription")]
        public async Task<IActionResult> CreateOnlineMeetingsSubscription()
        {
            try
            {
                _logger.LogInformation("Creating subscription for online meetings");

                var notificationUrl = "https://arandiabot.ggunifiedtech.com/api/notifications";
                
                _logger.LogInformation("Creating online meetings subscription with URL: {NotificationUrl}", notificationUrl);

                // Create subscription for online meetings (requires OnlineMeetings.ReadWrite.All)
                var subscription = new Microsoft.Graph.Models.Subscription
                {
                    Resource = "communications/onlineMeetings",
                    ChangeType = "created,updated,deleted",
                    NotificationUrl = notificationUrl,
                    ExpirationDateTime = DateTimeOffset.UtcNow.AddHours(1),
                    ClientState = "TeamsComplianceBot-OnlineMeetings-2025"
                };

                _logger.LogInformation("Attempting to create online meetings subscription: {Resource} with changeType: {ChangeType}", 
                    subscription.Resource, subscription.ChangeType);

                var createdSubscription = await _graphClient.Subscriptions.PostAsync(subscription);

                if (createdSubscription != null)
                {
                    _logger.LogInformation("Successfully created online meetings subscription: {SubscriptionId}", createdSubscription.Id);
                    
                    return Ok(new
                    {
                        success = true,
                        subscription = new
                        {
                            id = createdSubscription.Id,
                            resource = createdSubscription.Resource,
                            changeType = createdSubscription.ChangeType,
                            notificationUrl = createdSubscription.NotificationUrl,
                            expirationDateTime = createdSubscription.ExpirationDateTime,
                            clientState = createdSubscription.ClientState
                        },
                        message = "🎉 SUCCESS! Online meetings subscription created!",
                        analysis = "Bot can now receive notifications for scheduled Teams meetings",
                        capabilities = new[]
                        {
                            "Meeting creation notifications",
                            "Meeting updates and changes",
                            "Meeting cancellation alerts",
                            "Pre-meeting preparation"
                        },
                        nextSteps = new[]
                        {
                            "Monitor /api/notifications for meeting events",
                            "Bot can prepare for upcoming meetings",
                            "Set up automatic recording for scheduled meetings",
                            "Create calendar event subscriptions for broader coverage"
                        },
                        timestamp = DateTimeOffset.UtcNow
                    });
                }
                else
                {
                    return StatusCode(500, new
                    {
                        success = false,
                        message = "Online meetings subscription creation returned null",
                        timestamp = DateTime.UtcNow
                    });
                }
            }
            catch (Microsoft.Graph.Models.ODataErrors.ODataError ex)
            {
                _logger.LogError(ex, "Microsoft Graph error creating online meetings subscription");
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Error?.Code,
                    message = ex.Error?.Message,
                    details = ex.Error?.Details?.Select(d => new { d.Code, d.Message }),
                    analysis = "May need OnlineMeetings.ReadWrite.All permission",
                    timestamp = DateTimeOffset.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Unexpected error creating online meetings subscription");
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Message,
                    type = ex.GetType().Name,
                    timestamp = DateTimeOffset.UtcNow
                });
            }
        }

        /// <summary>
        /// Create comprehensive Teams monitoring subscriptions (all resources)
        /// </summary>
        [HttpPost("create-all-teams-subscriptions")]
        public async Task<IActionResult> CreateAllTeamsSubscriptions()
        {
            try
            {
                _logger.LogInformation("Creating comprehensive Teams monitoring subscriptions");

                var notificationUrl = "https://arandiabot.ggunifiedtech.com/api/notifications";
                var results = new List<object>();
                var subscriptions = new[]
                {
                    new { Resource = "communications/callRecords", ChangeType = "created", Description = "Call Records (completed calls)" },
                    new { Resource = "communications/calls", ChangeType = "created,updated", Description = "Live Calls (real-time)" },
                    new { Resource = "communications/onlineMeetings", ChangeType = "created,updated,deleted", Description = "Online Meetings (scheduled)" }
                };

                foreach (var sub in subscriptions)
                {
                    try
                    {
                        _logger.LogInformation("Creating subscription for {Resource}", sub.Resource);

                        var subscription = new Microsoft.Graph.Models.Subscription
                        {
                            Resource = sub.Resource,
                            ChangeType = sub.ChangeType,
                            NotificationUrl = notificationUrl,
                            ExpirationDateTime = DateTimeOffset.UtcNow.AddHours(1),
                            ClientState = $"TeamsComplianceBot-{sub.Resource.Replace("/", "-")}-2025"
                        };

                        var createdSubscription = await _graphClient.Subscriptions.PostAsync(subscription);

                        if (createdSubscription != null)
                        {
                            _logger.LogInformation("Successfully created subscription for {Resource}: {SubscriptionId}", 
                                sub.Resource, createdSubscription.Id);

                            results.Add(new
                            {
                                success = true,
                                resource = sub.Resource,
                                description = sub.Description,
                                subscriptionId = createdSubscription.Id,
                                changeType = createdSubscription.ChangeType,
                                expirationDateTime = createdSubscription.ExpirationDateTime
                            });
                        }
                        else
                        {
                            results.Add(new
                            {
                                success = false,
                                resource = sub.Resource,
                                description = sub.Description,
                                error = "Subscription creation returned null"
                            });
                        }
                    }
                    catch (Microsoft.Graph.Models.ODataErrors.ODataError ex)
                    {
                        _logger.LogError(ex, "Error creating subscription for {Resource}", sub.Resource);
                        results.Add(new
                        {
                            success = false,
                            resource = sub.Resource,
                            description = sub.Description,
                            error = ex.Error?.Code,
                            message = ex.Error?.Message
                        });
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "Unexpected error creating subscription for {Resource}", sub.Resource);
                        results.Add(new
                        {
                            success = false,
                            resource = sub.Resource,
                            description = sub.Description,
                            error = ex.Message
                        });
                    }
                }

                var successCount = results.Count(r => r.GetType().GetProperty("success")?.GetValue(r) as bool? == true);
                var totalCount = results.Count;

                return Ok(new
                {
                    success = successCount > 0,
                    message = $"Teams subscription creation completed: {successCount}/{totalCount} successful",
                    subscriptions = results,
                    summary = new
                    {
                        total = totalCount,
                        successful = successCount,
                        failed = totalCount - successCount
                    },
                    analysis = successCount == totalCount ? 
                        "🎉 All Teams subscriptions created successfully! Bot has comprehensive Teams monitoring." :
                        $"Partial success - {successCount} subscriptions created. Check permissions for failed resources.",
                    capabilities = new[]
                    {
                        "✅ Real-time call notifications",
                        "✅ Historical call record tracking", 
                        "✅ Online meeting monitoring",
                        "✅ Comprehensive Teams compliance coverage"
                    },
                    nextSteps = new[]
                    {
                        "Monitor /api/notifications for all Teams events",
                        "Set up subscription renewal before expiration",
                        "Configure automatic call recording triggers",
                        "Deploy bot for production Teams compliance monitoring"
                    },
                    timestamp = DateTimeOffset.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error creating comprehensive Teams subscriptions");
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Message,
                    timestamp = DateTimeOffset.UtcNow
                });
            }
        }

        /// <summary>
        /// Dashboard endpoint to show subscription status and explain log noise
        /// </summary>
        [HttpGet("dashboard")]
        public async Task<IActionResult> GetSubscriptionDashboard()
        {
            try
            {
                _logger.LogInformation("Getting subscription dashboard");

                // Get active subscriptions
                var subscriptions = await _subscriptionService.GetActiveSubscriptionsAsync();
                var subscriptionsList = subscriptions?.ToList() ?? new List<Microsoft.Graph.Models.Subscription>();

                // Analyze subscription health
                var activeCount = subscriptionsList.Count(s => s.ExpirationDateTime > DateTimeOffset.UtcNow);
                var expiredCount = subscriptionsList.Count(s => s.ExpirationDateTime <= DateTimeOffset.UtcNow);
                var expiringWithin1Hour = subscriptionsList.Count(s => 
                    s.ExpirationDateTime > DateTimeOffset.UtcNow && 
                    s.ExpirationDateTime <= DateTimeOffset.UtcNow.AddHours(1));

                return Ok(new
                {
                    success = true,
                    dashboard = new
                    {
                        timestamp = DateTimeOffset.UtcNow,
                        subscriptionHealth = new
                        {
                            total = subscriptionsList.Count,
                            active = activeCount,
                            expired = expiredCount,
                            expiringWithin1Hour = expiringWithin1Hour,
                            healthStatus = activeCount > 0 ? "Healthy" : "No Active Subscriptions"
                        },
                        subscriptions = subscriptionsList.Select(s => new
                        {
                            id = s.Id,
                            resource = s.Resource,
                            changeType = s.ChangeType,
                            notificationUrl = s.NotificationUrl,
                            expirationDateTime = s.ExpirationDateTime,
                            clientState = s.ClientState,
                            status = s.ExpirationDateTime > DateTimeOffset.UtcNow ? "Active" : "Expired",                            expiresIn = s.ExpirationDateTime > DateTimeOffset.UtcNow ? 
                                $"{(s.ExpirationDateTime - DateTimeOffset.UtcNow)?.TotalMinutes:F0} minutes" : "Expired"
                        }),
                        logStreamExplanation = new
                        {
                            title = "Why you see HTTP 400 errors in log stream",
                            explanation = "Microsoft Graph sends webhook validation requests that sometimes fail due to:",
                            causes = new[]
                            {
                                "Mixed HTTP/HTTPS protocol issues (Graph sends to :80 with HTTPS)",
                                "Invalid validation requests without proper tokens",
                                "Bot testing requests from various endpoints",
                                "Microsoft Graph retry attempts for failed validations"
                            },
                            resolution = "These 400 errors are expected during webhook validation and don't affect functionality",
                            action = "Successful subscription creation confirms validation is working correctly"
                        },
                        notificationEndpoint = new
                        {
                            url = _configuration["Recording:NotificationUrl"],
                            configured = !string.IsNullOrEmpty(_configuration["Recording:NotificationUrl"]),
                            validationStatus = "Working (subscriptions created successfully)"
                        }
                    },
                    nextSteps = activeCount == 0 ? new[]
                    {
                        "Create call records subscription: POST /api/subscriptions/create-call-records-extended",
                        "Create online meetings subscription: POST /api/subscriptions/create-online-meetings-fixed",
                        "Create live calls subscription: POST /api/subscriptions/create-live-calls-fixed"
                    } : new[]
                    {
                        $"✅ {activeCount} active subscriptions monitoring Teams activity",
                        "Monitor /api/notifications for incoming webhook notifications",
                        "Subscriptions will auto-renew if renewal service is running",
                        "HTTP 400 errors in logs are expected during validation - ignore them"
                    }
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting subscription dashboard");
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Message,
                    timestamp = DateTimeOffset.UtcNow
                });
            }
        }

        /// <summary>
        /// Create subscription for live Teams calls with improved error handling
        /// </summary>
        [HttpPost("create-live-calls-fixed")]
        public async Task<IActionResult> CreateLiveCallsSubscriptionFixed()
        {
            try
            {
                _logger.LogInformation("Creating subscription for live Teams calls with new permissions");

                var notificationUrl = "https://arandiabot.ggunifiedtech.com/api/notifications";
                
                _logger.LogInformation("Creating live calls subscription with URL: {NotificationUrl}", notificationUrl);

                // Create subscription for live calls with proper permissions
                var subscription = new Microsoft.Graph.Models.Subscription
                {
                    Resource = "communications/calls",
                    ChangeType = "created,updated",
                    NotificationUrl = notificationUrl,
                    ExpirationDateTime = DateTimeOffset.UtcNow.AddHours(24), // 24-hour subscription
                    ClientState = "TeamsComplianceBot-LiveCalls-Fixed-2025"
                };

                _logger.LogInformation("Attempting to create live calls subscription: {Resource} with changeType: {ChangeType}", 
                    subscription.Resource, subscription.ChangeType);

                var createdSubscription = await _graphClient.Subscriptions.PostAsync(subscription);

                if (createdSubscription != null)
                {
                    _logger.LogInformation("Successfully created live calls subscription: {SubscriptionId}", createdSubscription.Id);
                    
                    return Ok(new
                    {
                        success = true,
                        subscription = new
                        {
                            id = createdSubscription.Id,
                            resource = createdSubscription.Resource,
                            changeType = createdSubscription.ChangeType,
                            notificationUrl = createdSubscription.NotificationUrl,
                            expirationDateTime = createdSubscription.ExpirationDateTime,
                            clientState = createdSubscription.ClientState
                        },
                        message = "🎉 SUCCESS! Live Teams calls subscription created with new permissions!",
                        capabilities = new[]
                        {
                            "Real-time call start notifications",
                            "Call state change notifications", 
                            "Participant join/leave events",
                            "Call end notifications",
                            "Media access for recording"
                        },
                        nextSteps = new[]
                        {
                            "Monitor /api/notifications for live call events",
                            "Bot can now join calls automatically when notified",
                            "Set up automatic recording triggers",
                            "Test with actual Teams calls in your tenant"
                        },
                        timestamp = DateTimeOffset.UtcNow
                    });
                }
                else
                {
                    return StatusCode(500, new
                    {
                        success = false,
                        message = "Live calls subscription creation returned null",
                        timestamp = DateTimeOffset.UtcNow
                    });
                }
            }
            catch (Microsoft.Graph.Models.ODataErrors.ODataError ex)
            {
                _logger.LogError(ex, "Microsoft Graph error creating live calls subscription");
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Error?.Code,
                    message = ex.Error?.Message,
                    details = ex.Error?.Details?.Select(d => new { d.Code, d.Message }),
                    analysis = ex.Error?.Code switch
                    {
                        "Forbidden" => "Check permissions: Calls.AccessMedia.All, Calls.JoinGroupCall.All required",
                        "BadRequest" => "Check tenant configuration for Teams calls API access",
                        "UnauthorizedRequestType" => "Live calls subscriptions may require special tenant configuration",
                        _ => "Review Graph API documentation for communications/calls subscriptions"
                    },
                    troubleshooting = new[]
                    {
                        "Ensure Calls.AccessMedia.All permission is granted and consented",
                        "Verify tenant allows programmatic access to Teams calls",
                        "Check if application registration has Teams app manifest configured",
                        "Consider enabling Teams application access policy"
                    },
                    timestamp = DateTimeOffset.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Unexpected error creating live calls subscription");
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Message,
                    type = ex.GetType().Name,
                    timestamp = DateTimeOffset.UtcNow
                });
            }
        }

        /// <summary>
        /// Create subscription for online meetings with fixed permissions and changeType
        /// </summary>
        [HttpPost("create-online-meetings-fixed")]
        public async Task<IActionResult> CreateOnlineMeetingsSubscriptionFixed()
        {
            try
            {
                _logger.LogInformation("Creating subscription for online meetings with corrected permissions");

                var notificationUrl = "https://arandiabot.ggunifiedtech.com/api/notifications";
                
                _logger.LogInformation("Creating online meetings subscription with URL: {NotificationUrl}", notificationUrl);

                // Create subscription for online meetings with only supported changeTypes
                var subscription = new Microsoft.Graph.Models.Subscription
                {
                    Resource = "communications/onlineMeetings",
                    ChangeType = "created,updated", // Removed 'deleted' - may not be supported
                    NotificationUrl = notificationUrl,
                    ExpirationDateTime = DateTimeOffset.UtcNow.AddHours(24), // 24-hour subscription
                    ClientState = "TeamsComplianceBot-OnlineMeetings-Fixed-2025"
                };

                _logger.LogInformation("Attempting to create online meetings subscription: {Resource} with changeType: {ChangeType}", 
                    subscription.Resource, subscription.ChangeType);

                var createdSubscription = await _graphClient.Subscriptions.PostAsync(subscription);

                if (createdSubscription != null)
                {
                    _logger.LogInformation("Successfully created online meetings subscription: {SubscriptionId}", createdSubscription.Id);
                    
                    return Ok(new
                    {
                        success = true,
                        subscription = new
                        {
                            id = createdSubscription.Id,
                            resource = createdSubscription.Resource,
                            changeType = createdSubscription.ChangeType,
                            notificationUrl = createdSubscription.NotificationUrl,
                            expirationDateTime = createdSubscription.ExpirationDateTime,
                            clientState = createdSubscription.ClientState
                        },
                        message = "🎉 SUCCESS! Online meetings subscription created with new permissions!",
                        capabilities = new[]
                        {
                            "Meeting creation notifications",
                            "Meeting updates and changes",
                            "Pre-meeting preparation alerts",
                            "Scheduled meeting monitoring"
                        },
                        nextSteps = new[]
                        {
                            "Monitor /api/notifications for meeting events",
                            "Bot can prepare for upcoming meetings",
                            "Set up automatic recording for scheduled meetings",
                            "Test with Teams meeting creation/updates"
                        },
                        timestamp = DateTimeOffset.UtcNow
                    });
                }
                else
                {
                    return StatusCode(500, new
                    {
                        success = false,
                        message = "Online meetings subscription creation returned null",
                        timestamp = DateTimeOffset.UtcNow
                    });
                }
            }
            catch (Microsoft.Graph.Models.ODataErrors.ODataError ex)
            {
                _logger.LogError(ex, "Microsoft Graph error creating online meetings subscription");
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Error?.Code,
                    message = ex.Error?.Message,
                    details = ex.Error?.Details?.Select(d => new { d.Code, d.Message }),
                    analysis = ex.Error?.Code switch
                    {
                        "Forbidden" => "Check permissions: OnlineMeetings.ReadWrite.All required",
                        "BadRequest" => "Check changeType - may need to use only 'created' or 'updated'",
                        "InvalidRequest" => "Online meetings resource may have specific subscription requirements",
                        _ => "Review Graph API documentation for communications/onlineMeetings subscriptions"
                    },
                    troubleshooting = new[]
                    {
                        "Ensure OnlineMeetings.ReadWrite.All permission is granted and consented",
                        "Try different changeType combinations (created only, updated only)",
                        "Verify tenant configuration allows online meetings API access",
                        "Check if specific user context is required for online meetings"
                    },
                    timestamp = DateTimeOffset.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Unexpected error creating online meetings subscription");
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Message,
                    type = ex.GetType().Name,
                    timestamp = DateTimeOffset.UtcNow
                });
            }
        }

        /// <summary>
        /// Create all available Teams subscriptions with new permissions
        /// </summary>
        [HttpPost("create-all-subscriptions-with-permissions")]
        public async Task<IActionResult> CreateAllSubscriptionsWithPermissions()
        {
            try
            {
                _logger.LogInformation("Creating all Teams subscriptions with newly granted permissions");

                var notificationUrl = "https://arandiabot.ggunifiedtech.com/api/notifications";
                var results = new List<object>();
                
                var subscriptionRequests = new[]
                {
                    new { 
                        Resource = "communications/callRecords", 
                        ChangeType = "created", 
                        Description = "Call Records (completed calls)",
                        RequiredPermission = "CallRecords.Read.All"
                    },
                    new { 
                        Resource = "communications/calls", 
                        ChangeType = "created,updated", 
                        Description = "Live Calls (real-time)",
                        RequiredPermission = "Calls.AccessMedia.All, Calls.JoinGroupCall.All"
                    },
                    new { 
                        Resource = "communications/onlineMeetings", 
                        ChangeType = "created,updated", 
                        Description = "Online Meetings (scheduled)",
                        RequiredPermission = "OnlineMeetings.ReadWrite.All"
                    }
                };

                foreach (var sub in subscriptionRequests)
                {
                    try
                    {
                        _logger.LogInformation("Creating subscription for {Resource} - {Description}", sub.Resource, sub.Description);

                        var subscription = new Microsoft.Graph.Models.Subscription
                        {
                            Resource = sub.Resource,
                            ChangeType = sub.ChangeType,
                            NotificationUrl = notificationUrl,
                            ExpirationDateTime = DateTimeOffset.UtcNow.AddHours(24), // 24-hour expiration
                            ClientState = $"TeamsComplianceBot-{sub.Resource.Replace("/", "-")}-WithPermissions-2025"
                        };

                        var createdSubscription = await _graphClient.Subscriptions.PostAsync(subscription);

                        if (createdSubscription != null)
                        {
                            _logger.LogInformation("✅ Successfully created subscription for {Resource}: {SubscriptionId}", 
                                sub.Resource, createdSubscription.Id);

                            results.Add(new
                            {
                                success = true,
                                resource = sub.Resource,
                                description = sub.Description,
                                subscriptionId = createdSubscription.Id,
                                changeType = createdSubscription.ChangeType,
                                expirationDateTime = createdSubscription.ExpirationDateTime,
                                requiredPermission = sub.RequiredPermission
                            });
                        }
                        else
                        {
                            results.Add(new
                            {
                                success = false,
                                resource = sub.Resource,
                                description = sub.Description,
                                error = "Subscription creation returned null",
                                requiredPermission = sub.RequiredPermission
                            });
                        }
                    }
                    catch (Microsoft.Graph.Models.ODataErrors.ODataError ex)
                    {
                        _logger.LogError(ex, "❌ Error creating subscription for {Resource}", sub.Resource);
                        results.Add(new
                        {
                            success = false,
                            resource = sub.Resource,
                            description = sub.Description,
                            error = ex.Error?.Code,
                            message = ex.Error?.Message,
                            requiredPermission = sub.RequiredPermission
                        });
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "❌ Unexpected error creating subscription for {Resource}", sub.Resource);
                        results.Add(new
                        {
                            success = false,
                            resource = sub.Resource,
                            description = sub.Description,
                            error = ex.Message,
                            requiredPermission = sub.RequiredPermission
                        });
                    }
                }

                var successCount = results.Count(r => r.GetType().GetProperty("success")?.GetValue(r) as bool? == true);
                var totalCount = results.Count;

                return Ok(new
                {
                    success = successCount > 0,
                    message = $"Teams subscription creation with new permissions completed: {successCount}/{totalCount} successful",
                    subscriptions = results,
                    summary = new
                    {
                        total = totalCount,
                        successful = successCount,
                        failed = totalCount - successCount,
                        permissionsWorking = successCount > 0 ? "YES - New permissions are working!" : "Permissions may need additional configuration"
                    },
                    analysis = successCount == totalCount ? 
                        "🎉 All Teams subscriptions created successfully! All permissions are working correctly." :
                        $"Partial success - {successCount} subscriptions created. Some resources may need additional tenant configuration.",
                    capabilities = successCount > 0 ? new[]
                    {
                        "✅ Teams webhook validation working",
                        "✅ Microsoft Graph subscriptions operational", 
                        "✅ Real-time Teams monitoring active",
                        "✅ Comprehensive compliance coverage enabled"
                    } : new[]
                    {
                        "❌ Some subscriptions failed - check permissions and tenant configuration"
                    },
                    logStreamNoise = new
                    {
                        explanation = "HTTP 400 errors in log stream are expected during webhook validation",
                        cause = "Microsoft Graph validation requests sometimes have malformed URLs (mixing HTTP/HTTPS)",
                        impact = "These errors don't affect functionality - successful subscription creation confirms validation works",
                        action = "You can safely ignore these 400 errors in the log stream"
                    },
                    nextSteps = new[]
                    {
                        "✅ Monitor /api/notifications for actual Teams event notifications",
                        "✅ Test with real Teams calls and meetings in your tenant",
                        "✅ Set up subscription renewal service to maintain 24-hour subscriptions",
                        "✅ Deploy compliance recording logic for detected calls"
                    },
                    timestamp = DateTimeOffset.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error creating comprehensive Teams subscriptions with permissions");
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Message,
                    timestamp = DateTimeOffset.UtcNow
                });
            }
        }
    }
}
